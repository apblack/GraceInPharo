generated
symbolNames
	^ #('"("' '","' '")"' '"once"' '"is"' '"}"' '"{"' '"def"' '"="' '"method"' '":="' '"#pragma"' '"return"' '"import"' '";"' '"var"' '"dialect"' '"where"' '"class"' '"as"' '"exclude"' '"inherit"' '"alias"' '"type"' '"use"' '"Self"' '"Unknown"' '"object"' '"trait"' '"interface"' '"..."' '":"' '"›"' '"true"' '"prefix"' '"false"' '"‹"' '"]"' '"["' '<stringSegment>' '<uninterpretedString>' '<whitespace>' '<comment>' '<newline>' '<error>' '<dot>' '<openTP>' '<closeTP>' '<outer>' '<outerDot>' '<self>' '<selfDot>' '<id>' '<decimalNumeral>' '<baseExponentNumeral>' '<explicitRadixNumeral>' '<arrow>' '<dquote>' '<operator>' '<typeOperator>' '<typeRelation>' 'Ss' 'Ss ''_'' ?' 'Pragma' '( Pragma ''pragma'' Ss ''_'')' '( Pragma ''pragma'' Ss ''_'')*' 'Dialect' '( Dialect ''dialect'' Ss ''_'')' '( Dialect ''dialect'' Ss ''_'')?' '( ObjectItem ''item'' Ss ''_'')' '( ObjectItem ''item'' Ss ''_'')*' 'ObjectItem ''item'' ?' 'B e g i n' '( ";" <newline>)' 'Assignment' 'Return' 'Import' 'Identifier' 'AssignmentRequest' 'Expression ''value'' ?' 'StringLiteral' 'Annotations' 'VarDeclaration' 'DefDeclaration' 'TypeDeclaration' 'TypeOption' '( ":=" Expression ''initializer'')' '( ":=" Expression ''initializer'')?' '( "=" Expression ''initializer'')' '( "=" Expression ''initializer'')?' 'Empty' 'AnnotationLabel' '( "," AnnotationLabel ''ann'')' '( "," AnnotationLabel ''ann'')*' 'TypeArguments' 'AnnotationArgList' '( <id> ''requestPart'' AnnotationArgList ''argList'')' '( <id> ''requestPart'' AnnotationArgList ''argList'')*' '( "," Expression ''arg'')' '( "," Expression ''arg'')+' 'SequenceConstructor' 'SpecialTerm' '"once"?' 'MethodHeader' 'ReturnTypeOption' 'MethodBody' 'MethodBody?' '( Ss ''_'' Statement ''item'')' 'Type' '( Statement ''item'' ( Ss ''_'' Statement ''item'')*)' '( Statement ''item'' ( Ss ''_'' Statement ''item'')*)?' 'ObjectBody' 'ObjectBody?' 'ClassDeclaration' 'TraitDeclaration' 'AssignmentMethodHeader' 'ParameterizedMethodHeader' 'ParameterlessMethodHeader' 'BinaryMethodHeader' 'UnaryMethodHeader' 'TypeParameterList' 'SingleMethodParameter' 'MethodParameterList' '( <id> ''part'' MethodParameterList ''parameterList'')' '( <id> ''part'' MethodParameterList ''parameterList'')*' 'MethodParameter' '( "," MethodParameter ''parameter'')' 'Term' 'String' 'TypeExpression' 'ImplicitRequest' 'SelfRequest' 'OuterRequest' 'DottedRequest' 'RequestPartsWithArguments' 'RequestPart' '<outerDot>+' 'Statement' 'RequestPartNoArguments' '( <id> ''requestPart'' ArgumentList ''argList'')' '( <id> ''requestPart'' ArgumentList ''argList'')*' 'DelimitedTerm' 'TypeArguments ''typeArgList'' ?' 'UnaryRequest' 'Factor' '( <operator> ''op'' TypeArguments ''typeArgList'' ? Factor ''arg'')' '( <operator> ''op'' TypeArguments ''typeArgList'' ? Factor ''arg'')+' 'BinaryRequest' 'BlockParameterList' 'BlockParameter' '( "," BlockParameter ''parameter'')' '( "," BlockParameter ''parameter'')*' 'PatternOption' 'NonIdExpression' 'NonIdFactor' 'Interface' 'UnknownType' 'SelfType' 'Ellipsis' 'NonIdTerm' 'ObjectConstructor' 'Self' 'Outer' 'Boolean' 'Request' 'ObjectItem' 'Numeral' 'Module' '( "," Expression ''element'')' '( "," Expression ''element'')*' 'StringConstructor' 'UninterpretedString' 'StartString' 'MethodDeclaration' 'Expression' '<stringSegment> ''chars'' ?' 'RetDefault' '<stringSegment> ''stringSegment'' ?' 'StartInterp' '( StartInterp ''_'' "{" Expression ''interpolation'' StartString "}" <stringSegment> ''stringSegment'' ?)' '( StartInterp ''_'' "{" Expression ''interpolation'' StartString "}" <stringSegment> ''stringSegment'' ?)+' 'StartUninterp' 'Declaration' '<uninterpretedString> ''chars'' ?' '( Ss ''_'' ObjectItem ''item'')' '( Ss ''_'' ObjectItem ''item'')*' '( ObjectItem ''item'' ( Ss ''_'' ObjectItem ''item'')*)' '( ObjectItem ''item'' ( Ss ''_'' ObjectItem ''item'')*)?' 'UseStatement' 'InheritStatement' 'ReuseModifier' '( ReuseModifier ''modifier'')' '( ReuseModifier ''modifier'')*' 'ExcludeClause' 'AliasClause' 'Where' 'InterfaceLiteral' 'Block' 'TypeParameter' '( "," ''_'' TypeParameter ''parameter'')' '( "," ''_'' TypeParameter ''parameter'')*' 'ArgumentList' '( <typeOperator> ''op'' TypeArguments ''typeArgList'' ? Type ''arg'')' '( <typeOperator> ''op'' TypeArguments ''typeArgList'' ? Type ''arg'')*' '( "," Type ''typeArg'')' '( "," Type ''typeArg'')*' 'Signature' '( Signature ''method'' TypeDeclaration ''typeDecl'')' '( Ss ''_'' ( Signature ''method'' TypeDeclaration ''typeDecl''))' '( Ss ''_'' ( Signature ''method'' TypeDeclaration ''typeDecl''))*' 'WhereCondition' '( "," WhereCondition ''condition'')' '( "," WhereCondition ''condition'')*' '( "," MethodParameter ''parameter'')*' 'E O F' 'error' '( Ss ''_'' Statement ''item'')*')