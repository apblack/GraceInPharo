generated
symbolNames
	^ #('"public"' '","' '"override"' '"confidential"' '"writable"' '"readable"' '"is"' '"Unknown"' '"method"' '":="' '";"' '"def"' '"var"' '"type"' '"="' '"{"' '":"' '"›"' '"self"' '"alias"' '"false"' '"true"' '"‹"' '"outer"' '"exclude"' '"inherit"' '"}"' '"trait"' '"class"' '"prefix"' '"object"' '")"' '"("' '"use"' '<whitespace>' '<dot>' '<openTP>' '<outerDot>' '<selfDot>' '<name>' '<stringSegment>' '<uninterpretedString>' '<decimalNumeral>' '<baseExponentNumeral>' '<arrow>' '<dquote>' '<operator>' '( ";" Statement)*' 'Assignment' 'ReuseStatement' 'Identifier' 'VarDeclaration' 'DefDeclaration' 'TypeDeclaration' 'MethodDeclaration' 'ClassOrTraitDeclaration' 'TypePart' '( TypePart)' '( TypePart)?' 'AnnotationPart' '( AnnotationPart)' '( AnnotationPart)?' '( ":=" Expression)' '( ":=" Expression)?' 'Type' '( ";" Statement)' '( "," Annotation)' '( "," Annotation)*' 'MethodHeader' 'ReturnTypePart' 'ReturnTypePart?' 'ArgumentList' 'ObjectBody' 'ObjectConstructor' 'AssignmentMethodHeader' 'ParameterizedMethodHeader' 'ParameterlessMethodHeader' 'BinaryMethodHeader' 'UnaryMethodHeader' 'TypeParameters' 'SingleMethodParameter' 'StatementSequence' 'MethodParameters' '( <name> MethodParameters)' '( <name> MethodParameters)+' 'Annotation' 'Term' '( "," Identifier TypePart?)' '( "," Identifier TypePart?)*' 'Block' 'String' '( "," Identifier)' '( "," Identifier)*' '<closeTP>' 'ParameterList' '( ParameterList <arrow>)' 'BlockBody?' 'ReuseModifier' '( ReuseModifier)' '( ReuseModifier)*' 'ExcludeClause' 'AliasClause' '( "," <name>)' '( "," <name>)*' 'Factor' '( <operator> Factor)' '( <operator> Factor)+' 'DelimitedTerm' 'UnaryRequest' 'SpecialTerm' 'RequestPartWithArguments' 'SelfRequest' 'OuterRequest' 'TargetedRequest' 'Statement' 'RequestPart' 'Request' '( <outerDot>)' '( <outerDot>)+' 'Numeral' '( <name> ArgumentList)' '( <name> ArgumentList)*' '( "," Expression)' '( "," Expression)+' 'Module' 'Expression' '<radixNumeral>' 'StringLiteral' 'StringConstructor' 'UninterpretedString' 'StartString' 'B e g i n' 'Declaration' '<stringSegment>?' 'RetDefault' '( RetDefault "{" Expression StartString "}" <stringSegment>?)' '( RetDefault "{" Expression StartString "}" <stringSegment>?)+' 'StartUninterp' 'TypePart?' '( <uninterpretedString>)' '( <uninterpretedString>)?' 'E O F' 'error' 'BlockBody')