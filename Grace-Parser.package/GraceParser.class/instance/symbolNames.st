generated
symbolNames
	^ #('"public"' '","' '"confidential"' '"override"' '"is"' '"method"' '"writable"' '"type"' '":"' '"readable"' '"alias"' '"return"' '":="' '"import"' '"as"' '";"' '"def"' '"var"' '"="' '"{"' '"dialect"' '"]"' '"["' '"‹"' '"›"' '"interface"' '"exclude"' '"inherit"' '"Unknown"' '"}"' '"use"' '"outer"' '"object"' '"trait"' '"false"' '"prefix"' '"class"' '"("' '"true"' '"self"' '")"' '<stringSegment>' '<uninterpretedString>' '<whitespace>' '<comment>' '<newline>' '<error>' '<dot>' '<openTP>' '<closeTP>' '<outerDot>' '<selfDot>' '<name>' '<decimalNumeral>' '<baseExponentNumeral>' '<basedRadixNumeral>' '<arrow>' '<dquote>' '<operator>' 'Assignment' 'Return' 'ReuseStatement' 'ImportStatement' 'DialectStatement' 'EmptyStatement' 'Identifier' 'AssignmentRequest' 'StringLiteral' 'VarDeclaration' 'DefDeclaration' 'TypeDeclaration' 'MethodDeclaration' 'ClassOrTraitDeclaration' 'TypePart' '( TypePart)' '( TypePart)?' 'AnnotationPart' '( AnnotationPart)' '( AnnotationPart)?' 'Sep' '( ":=" Expression)?' 'InterfaceLiteral' 'Annotation' '( "," Annotation)' '( "," Annotation)*' 'MethodHeader' 'ReturnTypePart' 'ReturnTypePart?' 'B e g i n' 'ObjectConstructor' 'AssignmentMethodHeader' 'ParameterizedMethodHeader' 'ParameterlessMethodHeader' 'BinaryMethodHeader' 'UnaryMethodHeader' 'TypeParameters' 'SingleMethodParameter' 'BlockBody' 'MethodParameters' '( <name> MethodParameters)' '( <name> MethodParameters)+' '( ":=" Expression)' 'TypePart?' '( "," Identifier TypePart?)' '( "," Identifier TypePart?)*' 'Type' 'Term' '( "," Identifier)' '( "," Identifier)*' 'String' 'RequestWithArguments' 'SelfRequest' 'OuterRequest' 'TargetedRequest' 'Statement' 'RequestPart' 'Request' '( <outerDot>)' '( <outerDot>)+' 'Numeral' 'TypeArguments' '( <name> ArgumentList)' '( <name> ArgumentList)*' 'DelimitedTerm' '( "," Expression)' '( "," Expression)+' 'TypeArguments?' 'UnaryRequest' 'Factor' '( <operator> TypeArguments? Factor)' '( <operator> TypeArguments? Factor)+' 'BinaryRequest' 'BlockParameterList' '( BlockParameterList <arrow>)' 'BlockParameter' '( "," BlockParameter)' '( "," BlockParameter)+' 'PatternPart' 'PatternPart?' 'NonIdExpression' '( Sep Statement)' '( Sep Statement)*' 'NonIdFactor' 'NonIdTerm' 'SequenceConstructor' 'SpecialTerm' '( "," Type)' '( "," Type)*' 'Signature' 'Sep?' '( Sep Signature)' '( Sep Signature)*' 'Module' 'Expression' 'Declaration' '( "," Expression)*' 'StringConstructor' 'UninterpretedString' 'StartString' '<comment>?' 'Block' '<stringSegment>?' 'RetDefault' '( RetDefault "{" Expression StartString "}" <stringSegment>?)' '( RetDefault "{" Expression StartString "}" <stringSegment>?)+' 'StartUninterp' 'ArgumentList' '( <uninterpretedString>)' '( <uninterpretedString>)?' 'ReuseModifier' '( ReuseModifier)' '( ReuseModifier)*' 'ExcludeClause' 'AliasClause' 'E O F' 'error' 'ObjectBody')