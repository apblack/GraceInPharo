generated
symbolNames
	^ #('"("' '","' '")"' '"once"' '"is"' '"}"' '"{"' '"def"' '"="' '"method"' '":="' '"#pragma"' '"return"' '"import"' '";"' '"var"' '"dialect"' '"where"' '"class"' '"as"' '"exclude"' '"inherit"' '"alias"' '"type"' '"use"' '"Self"' '"Unknown"' '"object"' '"trait"' '"interface"' '"..."' '":"' '"›"' '"true"' '"prefix"' '"false"' '"‹"' '"]"' '"["' '<stringSegment>' '<uninterpretedString>' '<whitespace>' '<comment>' '<newline>' '<error>' '<dot>' '<openTP>' '<closeTP>' '<outer>' '<outerDot>' '<self>' '<selfDot>' '<id>' '<decimalNumeral>' '<baseExponentNumeral>' '<basedRadixNumeral>' '<arrow>' '<dquote>' '<operator>' '<typeOperator>' '<typeRelation>' 'Ss?' 'Pragma' '( Pragma Ss )' '( Pragma Ss )*' 'Dialect' '( Dialect Ss )' '( Dialect Ss )?' '( ObjectItem Ss )' '( ObjectItem Ss )*' 'ObjectItem?' 'B e g i n' '( ";" <newline> )' 'Assignment' 'Return' 'Import' 'Identifier' 'AssignmentRequest' 'Expression?' 'StringLiteral' 'Annotation' 'VarDeclaration' 'DefDeclaration' 'TypeDeclaration' 'TypeOption' '( ":=" Expression )' '( ":=" Expression )?' '( "=" Expression )' '( "=" Expression )?' 'AnnotationLabel' '( "," AnnotationLabel )' '( "," AnnotationLabel )*' 'TypeArguments' 'AnnotationArgList' '( <id> AnnotationArgList )' '( <id> AnnotationArgList )*' '( "," Expression )' '( "," Expression )+' 'SequenceConstructor' 'SpecialTerm' '"once"?' 'MethodHeader' 'ReturnTypeOption' '( Ss Statement )' '( Ss Statement )*' '( Statement ( Ss Statement )* Ss? )' 'Ss' '( "{" ( Statement ( Ss Statement )* Ss? )? "}" )' '( "{" ( Statement ( Ss Statement )* Ss? )? "}" )?' '( Ss ObjectItem )' '( Ss ObjectItem )*' '( ObjectItem ( Ss ObjectItem )* Ss? )' '( ObjectItem ( Ss ObjectItem )* Ss? )?' '( "{" ( ObjectItem ( Ss ObjectItem )* Ss? )? "}" )' '( "{" ( ObjectItem ( Ss ObjectItem )* Ss? )? "}" )?' 'ClassDeclaration' 'TraitDeclaration' 'AssignmentMethodHeader' 'ParameterizedMethodHeader' 'ParameterlessMethodHeader' 'BinaryMethodHeader' 'UnaryMethodHeader' 'TypeParameterList' 'SingleMethodParameter' 'MethodParameterList' '( <id> MethodParameterList )' 'MethodDeclaration' 'MethodParameter' '( "," MethodParameter )' '( "," MethodParameter )*' 'Type' 'TypeExpression' 'ImplicitRequest' 'SelfRequest' 'OuterRequest' 'DottedRequest' 'RequestPartWithArguments' 'RequestPart' '<outerDot>+' 'Expression' 'RequestPartNoArguments' '( <id> ArgumentList )' '( <id> ArgumentList )*' 'DelimitedTerm' 'TypeArguments?' 'UnaryRequest' 'Factor' '( <operator> TypeArguments? Factor )' '( <operator> TypeArguments? Factor )+' 'BinaryRequest' 'BlockParameterList' 'BlockParameter' '( "," BlockParameter )' '( "," BlockParameter )*' 'PatternOption' 'NonIdExpression' 'NonIdFactor' 'Interface' 'Ellipsis' 'NonIdTerm' 'ObjectConstructor' 'Self' 'Outer' 'Boolean' 'Declaration' 'Term' 'String' 'Statement' '( "," Expression )*' 'StringConstructor' 'UninterpretedString' 'StartString' 'Request' 'ObjectItem' '<stringSegment>?' 'RetDefault' 'StartInterp' '( StartInterp "{" Expression StartString "}" <stringSegment>? )' '( StartInterp "{" Expression StartString "}" <stringSegment>? )+' 'StartUninterp' 'Block' '<uninterpretedString>?' 'UseStatement' 'InheritStatement' 'ReuseModifier' '( ReuseModifier )' '( ReuseModifier )*' 'ExcludeClause' 'AliasClause' 'UnknownType' 'SelfType' 'Where' 'InterfaceLiteral' 'ArgumentList' 'TypeParameter' '( "," TypeParameter )' '( "," TypeParameter )*' 'Numeral' '( <typeOperator> TypeArguments? Type )' '( <typeOperator> TypeArguments? Type )*' '( "," Type )' '( "," Type )*' 'Signature' '( Ss Signature )' '( Ss Signature )*' 'WhereCondition' '( "," WhereCondition )' '( "," WhereCondition )*' 'Module' 'E O F' 'error' '( <id> MethodParameterList )*' '( Statement ( Ss Statement )* Ss? )?')