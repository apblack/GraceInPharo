generated
symbolNames
	^ #('"confidential"' '"public"' '"override"' '"readable"' '","' '"is"' '"}"' '"{"' '"="' '"writable"' '"method"' '":="' '"#pragma"' '"return"' '"import"' '";"' '"class"' '"def"' '"var"' '"Unknown"' '"as"' '"dialect"' '"object"' '"›"' '"use"' '"inherit"' '"‹"' '"trait"' '"interface"' '"type"' '"]"' '"exclude"' '"alias"' '")"' '"("' '"["' '":"' '"prefix"' '"..."' '"self"' '"outer"' '"false"' '"true"' '<stringSegment>' '<uninterpretedString>' '<whitespace>' '<comment>' '<newline>' '<error>' '<dot>' '<openTP>' '<closeTP>' '<outerDot>' '<selfDot>' '<id>' '<decimalNumeral>' '<baseExponentNumeral>' '<basedRadixNumeral>' '<arrow>' '<dquote>' '<operator>' '<typeOperator>' 'Type' 'Ss' 'Ss?' 'Pragma' '( Pragma Ss)' '( Pragma Ss)*' 'Dialect' '( Dialect Ss)' '( Dialect Ss)?' '( ObjectItem Ss)' '( ObjectItem Ss)*' 'ObjectItem?' 'B e g i n' '( ";" <newline>)' 'Assignment' 'Return' 'Import' 'Identifier' 'AssignmentRequest' 'Expression?' 'StringLiteral' 'AnnotationOption' 'VarDeclaration' 'DefDeclaration' 'TypeDeclaration' 'TypeOption' '( ":=" Expression)' '( ":=" Expression)?' 'Annotation' '( "," Annotation)' '( "," Annotation)*' 'MethodHeader' 'ReturnTypeOption' '( Ss Statement)' '( Ss Statement)*' 'Term' '( Statement ( Ss Statement)* Ss?)?' '( Ss ObjectItem)' '( Ss ObjectItem)*' '( ObjectItem ( Ss ObjectItem)* Ss?)' '( ObjectItem ( Ss ObjectItem)* Ss?)?' 'ClassDeclaration' 'TraitDeclaration' 'AssignmentMethodHeader' 'ParameterizedMethodHeader' 'ParameterlessMethodHeader' 'BinaryMethodHeader' 'UnaryMethodHeader' 'TypeParameterList' 'SingleMethodParameter' 'MethodParameterList' '( <id> TypeParameterList MethodParameterList)' '( <id> TypeParameterList MethodParameterList)+' 'Declaration' 'String' '( "," MethodParameter)*' 'Expression' 'TypeExpression' 'Statement' 'SelfRequest' 'OuterRequest' 'TargetedRequest' 'RequestWithArguments' 'RequestPart' '<outerDot>+' 'Block' 'RequestWithoutArguments' 'TypeArguments' '( <id> ArgumentList)' '( <id> ArgumentList)*' 'DelimitedTerm' '( "," Expression)' '( "," Expression)+' 'TypeArguments?' 'UnaryRequest' 'Factor' '( <operator> TypeArguments? Factor)' '( <operator> TypeArguments? Factor)+' 'BinaryRequest' 'BlockParameterList' 'BlockParameter' '( "," BlockParameter)' '( "," BlockParameter)*' 'PatternOption' 'NonIdExpression' 'NonIdFactor' 'Interface' 'Ellipsis' 'NonIdTerm' 'ObjectConstructor' 'SequenceConstructor' 'SpecialTerm' 'Request' 'ObjectItem' 'Numeral' '( "," Expression)*' 'StringConstructor' 'UninterpretedString' 'StartString' 'Module' 'MethodDeclaration' '<stringSegment>?' 'RetDefault' 'StartInterp' '( StartInterp "{" Expression StartString "}" <stringSegment>?)' '( StartInterp "{" Expression StartString "}" <stringSegment>?)+' 'StartUninterp' 'ArgumentList' '<uninterpretedString>?' 'UseStatement' 'InheritStatement' 'ReuseModifier' '( ReuseModifier)' '( ReuseModifier)*' 'ExcludeClause' 'AliasClause' 'InterfaceLiteral' '( "," MethodParameter)' 'TypeParameter' '( "," TypeParameter)' '( "," TypeParameter)*' 'MethodParameter' '( <typeOperator> TypeArguments? Type)' '( <typeOperator> TypeArguments? Type)*' '( "," Type)' '( "," Type)*' 'UnknownType' 'Signature' '( Ss Signature)' '( Ss Signature)*' 'E O F' 'error' 'ReceiverlessRequest' '( Statement ( Ss Statement)* Ss?)')