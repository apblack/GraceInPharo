generated
symbolNames
	^ #('"is"' '":"' '"public"' '","' '"type"' '"readable"' '"override"' '"confidential"' '"="' '"alias"' '":="' '";"' '"import"' '"return"' '"writable"' '"var"' '"dialect"' '"as"' '"def"' '"method"' '"Unknown"' '"outer"' '"›"' '"‹"' '"{"' '"exclude"' '"inherit"' '"use"' '"false"' '"true"' '"class"' '"}"' '"trait"' '"self"' '"object"' '"prefix"' '")"' '"("' '<stringSegment>' '<uninterpretedString>' '<whitespace>' '<newline>' '<error>' '<blankline>' '<dot>' '<openTP>' '<outerDot>' '<selfDot>' '<name>' '<comment>' '<decimalNumeral>' '<baseExponentNumeral>' '<arrow>' '<dquote>' '<operator>' 'ReuseStatement' 'ImportStatement' 'DialectStatement' 'StandaloneComment' 'Identifier' 'StringLiteral' 'Assignment' 'Sep' 'VarDeclaration' 'DefDeclaration' 'TypeDeclaration' 'MethodDeclaration' 'ClassOrTraitDeclaration' 'TypePart' '( TypePart)' '( TypePart)?' 'AnnotationPart' '( AnnotationPart)' '( AnnotationPart)?' '( ":=" Expression)' '( ":=" Expression)?' 'Type' 'ArgumentList' '( "," Annotation)' '( "," Annotation)*' 'MethodHeader' 'ReturnTypePart' 'ReturnTypePart?' 'ObjectBody' 'ObjectConstructor' 'AssignmentMethodHeader' 'ParameterizedMethodHeader' 'ParameterlessMethodHeader' 'B e g i n' 'UnaryMethodHeader' 'Declaration' 'SingleMethodParameter' 'BlockBody' 'MethodParameters' '( <name> MethodParameters)' '( <name> MethodParameters)+' 'Return' 'TypePart?' '( "," Identifier TypePart?)' '( "," Identifier TypePart?)*' 'Term' 'String' '( "," Identifier)' '( "," Identifier)*' '<closeTP>' 'RequestPartWithArguments' 'SelfRequest' 'OuterRequest' 'TargetedRequest' 'Statement' 'RequestPart' 'Request' '( <outerDot>)' '( <outerDot>)+' 'Numeral' '( <name> ArgumentList)' '( <name> ArgumentList)*' 'DelimitedTerm' '( "," Expression)' '( "," Expression)+' 'UnaryRequest' 'BlockParameters' '( BlockParameters <arrow>)' '( "," <name>)' '( "," <name>)*' '( Sep Statement)' '( Sep Statement)*' 'Sep?' 'Factor' '( <operator> Factor)' '( <operator> Factor)+' 'SpecialTerm' 'Module' 'BinaryMethodHeader' '<radixNumeral>' 'StringConstructor' 'UninterpretedString' 'StartString' 'Expression' 'TypeParameters' '<stringSegment>?' 'RetDefault' '( RetDefault "{" Expression StartString "}" <stringSegment>?)' '( RetDefault "{" Expression StartString "}" <stringSegment>?)+' 'StartUninterp' 'Block' '( <uninterpretedString>)' '( <uninterpretedString>)?' 'ReuseModifier' '( ReuseModifier)' '( ReuseModifier)*' 'ExcludeClause' 'AliasClause' 'E O F' 'error' 'Annotation')